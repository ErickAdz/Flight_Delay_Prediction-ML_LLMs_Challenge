name: 'Continuous Delivery'


on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        # Fetches all history for all tags and branches
        fetch-depth: '0'  


    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
        version: 'latest'
        project-id: ${{ secrets.GCP_PROJECT_ID }}
        service-account-key: ${{ secrets.GCP_SA_KEY }}
        export-default-credentials: true

    - name: Configure Docker
      run: gcloud auth configure-docker


    - name: Auth with custom credentials
      run: echo ${{ secrets.GCP_SA_KEY }} | base64 --decode > gcp-key.json
      
    - name: Login to Google Cloud Registry
      run: cat gcp-key.json | docker login -u _json_key --password-stdin https://gcr.io

    - name: Remove GCP key file
      if: always()
      run: rm -f gcp-key.json

    - name: Build and Push Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapp:$GITHUB_SHA .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapp:$GITHUB_SHA

    - name: Calculate new version tag
      id: versioning
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")

        echo "Latest tag: $latest_tag"
        
        # Assume the tag is in the form v0.0.0 (semantic versioning)
        major=$(echo "$latest_tag" | cut -d '.' -f 1 | sed 's/v//')
        minor=$(echo "$latest_tag" | cut -d '.' -f 2)
        patch=$(echo "$latest_tag" | cut -d '.' -f 3)

        if [[ -z "$patch" ]]; then
          # If there was no patch level, then this must be a zero tag
          patch=0
        fi

        # Increment the patch version
        new_patch=$(($patch + 1))

        # Form the new tag
        new_tag="v$major.$minor.$new_patch"
        
        echo "New tag: $new_tag"
        
        # Set the new tag as an output variable to use in subsequent steps
        echo "new_tag=$new_tag" >> $GITHUB_ENV
      shell: bash

  
    # This is where you could add a step to tag the image as ready for release,
    # for example, tagging it with "latest" or a version number
    - name: Tag Image as Ready for Release
      run: |
        new_tag=${{ steps.versioning.outputs.new_tag }}
        docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapp:$GITHUB_SHA gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapp:$new_tag
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/fastapp:$new_tag
